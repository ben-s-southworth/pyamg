# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_amg_core', [dirname(__file__)])
        except ImportError:
            import _amg_core
            return _amg_core
        if fp is not None:
            try:
                _mod = imp.load_module('_amg_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _amg_core = swig_import_helper()
    del swig_import_helper
else:
    import _amg_core
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amg_core.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _amg_core.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _amg_core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _amg_core.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _amg_core.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _amg_core.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _amg_core.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _amg_core.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _amg_core.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _amg_core.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _amg_core.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _amg_core.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _amg_core.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _amg_core.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _amg_core.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _amg_core.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _amg_core.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _amg_core.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(IntVector self) -> SwigPyIterator"""
        return _amg_core.IntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(IntVector self) -> bool"""
        return _amg_core.IntVector___nonzero__(self)

    def __bool__(self):
        """__bool__(IntVector self) -> bool"""
        return _amg_core.IntVector___bool__(self)

    def __len__(self):
        """__len__(IntVector self) -> std::vector< int >::size_type"""
        return _amg_core.IntVector___len__(self)

    def pop(self):
        """pop(IntVector self) -> std::vector< int >::value_type"""
        return _amg_core.IntVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _amg_core.IntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v=std::vector< int,std::allocator< int > >())
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _amg_core.IntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _amg_core.IntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _amg_core.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _amg_core.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _amg_core.IntVector___setitem__(self, *args)

    def append(self, *args):
        """append(IntVector self, std::vector< int >::value_type const & x)"""
        return _amg_core.IntVector_append(self, *args)

    def empty(self):
        """empty(IntVector self) -> bool"""
        return _amg_core.IntVector_empty(self)

    def size(self):
        """size(IntVector self) -> std::vector< int >::size_type"""
        return _amg_core.IntVector_size(self)

    def clear(self):
        """clear(IntVector self)"""
        return _amg_core.IntVector_clear(self)

    def swap(self, *args):
        """swap(IntVector self, IntVector v)"""
        return _amg_core.IntVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _amg_core.IntVector_get_allocator(self)

    def begin(self):
        """begin(IntVector self) -> std::vector< int >::iterator"""
        return _amg_core.IntVector_begin(self)

    def end(self):
        """end(IntVector self) -> std::vector< int >::iterator"""
        return _amg_core.IntVector_end(self)

    def rbegin(self):
        """rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _amg_core.IntVector_rbegin(self)

    def rend(self):
        """rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _amg_core.IntVector_rend(self)

    def pop_back(self):
        """pop_back(IntVector self)"""
        return _amg_core.IntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _amg_core.IntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int)> self) -> IntVector
        __init__(std::vector<(int)> self, IntVector arg2) -> IntVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> IntVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        this = _amg_core.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _amg_core.IntVector_push_back(self, *args)

    def front(self):
        """front(IntVector self) -> std::vector< int >::value_type const &"""
        return _amg_core.IntVector_front(self)

    def back(self):
        """back(IntVector self) -> std::vector< int >::value_type const &"""
        return _amg_core.IntVector_back(self)

    def assign(self, *args):
        """assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _amg_core.IntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _amg_core.IntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _amg_core.IntVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(IntVector self, std::vector< int >::size_type n)"""
        return _amg_core.IntVector_reserve(self, *args)

    def capacity(self):
        """capacity(IntVector self) -> std::vector< int >::size_type"""
        return _amg_core.IntVector_capacity(self)

    __swig_destroy__ = _amg_core.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _amg_core.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    """Proxy of C++ std::vector<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(FloatVector self) -> SwigPyIterator"""
        return _amg_core.FloatVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(FloatVector self) -> bool"""
        return _amg_core.FloatVector___nonzero__(self)

    def __bool__(self):
        """__bool__(FloatVector self) -> bool"""
        return _amg_core.FloatVector___bool__(self)

    def __len__(self):
        """__len__(FloatVector self) -> std::vector< float >::size_type"""
        return _amg_core.FloatVector___len__(self)

    def pop(self):
        """pop(FloatVector self) -> std::vector< float >::value_type"""
        return _amg_core.FloatVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> FloatVector"""
        return _amg_core.FloatVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, 
            FloatVector v=std::vector< float,std::allocator< float > >())
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        """
        return _amg_core.FloatVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _amg_core.FloatVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(FloatVector self, std::vector< float >::difference_type i)
        __delitem__(FloatVector self, PySliceObject * slice)
        """
        return _amg_core.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(FloatVector self, PySliceObject * slice) -> FloatVector
        __getitem__(FloatVector self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _amg_core.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(FloatVector self, PySliceObject * slice, FloatVector v)
        __setitem__(FloatVector self, PySliceObject * slice)
        __setitem__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _amg_core.FloatVector___setitem__(self, *args)

    def append(self, *args):
        """append(FloatVector self, std::vector< float >::value_type const & x)"""
        return _amg_core.FloatVector_append(self, *args)

    def empty(self):
        """empty(FloatVector self) -> bool"""
        return _amg_core.FloatVector_empty(self)

    def size(self):
        """size(FloatVector self) -> std::vector< float >::size_type"""
        return _amg_core.FloatVector_size(self)

    def clear(self):
        """clear(FloatVector self)"""
        return _amg_core.FloatVector_clear(self)

    def swap(self, *args):
        """swap(FloatVector self, FloatVector v)"""
        return _amg_core.FloatVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(FloatVector self) -> std::vector< float >::allocator_type"""
        return _amg_core.FloatVector_get_allocator(self)

    def begin(self):
        """begin(FloatVector self) -> std::vector< float >::iterator"""
        return _amg_core.FloatVector_begin(self)

    def end(self):
        """end(FloatVector self) -> std::vector< float >::iterator"""
        return _amg_core.FloatVector_end(self)

    def rbegin(self):
        """rbegin(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _amg_core.FloatVector_rbegin(self)

    def rend(self):
        """rend(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _amg_core.FloatVector_rend(self)

    def pop_back(self):
        """pop_back(FloatVector self)"""
        return _amg_core.FloatVector_pop_back(self)

    def erase(self, *args):
        """
        erase(FloatVector self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(FloatVector self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _amg_core.FloatVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(float)> self) -> FloatVector
        __init__(std::vector<(float)> self, FloatVector arg2) -> FloatVector
        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> FloatVector
        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> FloatVector
        """
        this = _amg_core.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(FloatVector self, std::vector< float >::value_type const & x)"""
        return _amg_core.FloatVector_push_back(self, *args)

    def front(self):
        """front(FloatVector self) -> std::vector< float >::value_type const &"""
        return _amg_core.FloatVector_front(self)

    def back(self):
        """back(FloatVector self) -> std::vector< float >::value_type const &"""
        return _amg_core.FloatVector_back(self)

    def assign(self, *args):
        """assign(FloatVector self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _amg_core.FloatVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(FloatVector self, std::vector< float >::size_type new_size)
        resize(FloatVector self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _amg_core.FloatVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _amg_core.FloatVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(FloatVector self, std::vector< float >::size_type n)"""
        return _amg_core.FloatVector_reserve(self, *args)

    def capacity(self):
        """capacity(FloatVector self) -> std::vector< float >::size_type"""
        return _amg_core.FloatVector_capacity(self)

    __swig_destroy__ = _amg_core.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _amg_core.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(DoubleVector self) -> SwigPyIterator"""
        return _amg_core.DoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(DoubleVector self) -> bool"""
        return _amg_core.DoubleVector___nonzero__(self)

    def __bool__(self):
        """__bool__(DoubleVector self) -> bool"""
        return _amg_core.DoubleVector___bool__(self)

    def __len__(self):
        """__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _amg_core.DoubleVector___len__(self)

    def pop(self):
        """pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _amg_core.DoubleVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _amg_core.DoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            DoubleVector v=std::vector< double,std::allocator< double > >())
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _amg_core.DoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _amg_core.DoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _amg_core.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _amg_core.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _amg_core.DoubleVector___setitem__(self, *args)

    def append(self, *args):
        """append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _amg_core.DoubleVector_append(self, *args)

    def empty(self):
        """empty(DoubleVector self) -> bool"""
        return _amg_core.DoubleVector_empty(self)

    def size(self):
        """size(DoubleVector self) -> std::vector< double >::size_type"""
        return _amg_core.DoubleVector_size(self)

    def clear(self):
        """clear(DoubleVector self)"""
        return _amg_core.DoubleVector_clear(self)

    def swap(self, *args):
        """swap(DoubleVector self, DoubleVector v)"""
        return _amg_core.DoubleVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _amg_core.DoubleVector_get_allocator(self)

    def begin(self):
        """begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _amg_core.DoubleVector_begin(self)

    def end(self):
        """end(DoubleVector self) -> std::vector< double >::iterator"""
        return _amg_core.DoubleVector_end(self)

    def rbegin(self):
        """rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _amg_core.DoubleVector_rbegin(self)

    def rend(self):
        """rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _amg_core.DoubleVector_rend(self)

    def pop_back(self):
        """pop_back(DoubleVector self)"""
        return _amg_core.DoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _amg_core.DoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        this = _amg_core.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _amg_core.DoubleVector_push_back(self, *args)

    def front(self):
        """front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _amg_core.DoubleVector_front(self)

    def back(self):
        """back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _amg_core.DoubleVector_back(self)

    def assign(self, *args):
        """assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _amg_core.DoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _amg_core.DoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _amg_core.DoubleVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _amg_core.DoubleVector_reserve(self, *args)

    def capacity(self):
        """capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _amg_core.DoubleVector_capacity(self)

    __swig_destroy__ = _amg_core.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _amg_core.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class ComplexFloatVector(_object):
    """Proxy of C++ std::vector<(std::complex<(float)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexFloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexFloatVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(ComplexFloatVector self) -> SwigPyIterator"""
        return _amg_core.ComplexFloatVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(ComplexFloatVector self) -> bool"""
        return _amg_core.ComplexFloatVector___nonzero__(self)

    def __bool__(self):
        """__bool__(ComplexFloatVector self) -> bool"""
        return _amg_core.ComplexFloatVector___bool__(self)

    def __len__(self):
        """__len__(ComplexFloatVector self) -> std::vector< std::complex< float > >::size_type"""
        return _amg_core.ComplexFloatVector___len__(self)

    def pop(self):
        """pop(ComplexFloatVector self) -> std::vector< std::complex< float > >::value_type"""
        return _amg_core.ComplexFloatVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(ComplexFloatVector self, std::vector< std::complex< float > >::difference_type i, std::vector< std::complex< float > >::difference_type j) -> ComplexFloatVector"""
        return _amg_core.ComplexFloatVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ComplexFloatVector self, std::vector< std::complex< float > >::difference_type i, std::vector< std::complex< float > >::difference_type j, 
            ComplexFloatVector v=std::vector< std::complex< float >,std::allocator< std::complex< float > > >())
        __setslice__(ComplexFloatVector self, std::vector< std::complex< float > >::difference_type i, std::vector< std::complex< float > >::difference_type j)
        """
        return _amg_core.ComplexFloatVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(ComplexFloatVector self, std::vector< std::complex< float > >::difference_type i, std::vector< std::complex< float > >::difference_type j)"""
        return _amg_core.ComplexFloatVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ComplexFloatVector self, std::vector< std::complex< float > >::difference_type i)
        __delitem__(ComplexFloatVector self, PySliceObject * slice)
        """
        return _amg_core.ComplexFloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ComplexFloatVector self, PySliceObject * slice) -> ComplexFloatVector
        __getitem__(ComplexFloatVector self, std::vector< std::complex< float > >::difference_type i) -> std::vector< std::complex< float > >::value_type const &
        """
        return _amg_core.ComplexFloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ComplexFloatVector self, PySliceObject * slice, ComplexFloatVector v)
        __setitem__(ComplexFloatVector self, PySliceObject * slice)
        __setitem__(ComplexFloatVector self, std::vector< std::complex< float > >::difference_type i, std::vector< std::complex< float > >::value_type const & x)
        """
        return _amg_core.ComplexFloatVector___setitem__(self, *args)

    def append(self, *args):
        """append(ComplexFloatVector self, std::vector< std::complex< float > >::value_type const & x)"""
        return _amg_core.ComplexFloatVector_append(self, *args)

    def empty(self):
        """empty(ComplexFloatVector self) -> bool"""
        return _amg_core.ComplexFloatVector_empty(self)

    def size(self):
        """size(ComplexFloatVector self) -> std::vector< std::complex< float > >::size_type"""
        return _amg_core.ComplexFloatVector_size(self)

    def clear(self):
        """clear(ComplexFloatVector self)"""
        return _amg_core.ComplexFloatVector_clear(self)

    def swap(self, *args):
        """swap(ComplexFloatVector self, ComplexFloatVector v)"""
        return _amg_core.ComplexFloatVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(ComplexFloatVector self) -> std::vector< std::complex< float > >::allocator_type"""
        return _amg_core.ComplexFloatVector_get_allocator(self)

    def begin(self):
        """begin(ComplexFloatVector self) -> std::vector< std::complex< float > >::iterator"""
        return _amg_core.ComplexFloatVector_begin(self)

    def end(self):
        """end(ComplexFloatVector self) -> std::vector< std::complex< float > >::iterator"""
        return _amg_core.ComplexFloatVector_end(self)

    def rbegin(self):
        """rbegin(ComplexFloatVector self) -> std::vector< std::complex< float > >::reverse_iterator"""
        return _amg_core.ComplexFloatVector_rbegin(self)

    def rend(self):
        """rend(ComplexFloatVector self) -> std::vector< std::complex< float > >::reverse_iterator"""
        return _amg_core.ComplexFloatVector_rend(self)

    def pop_back(self):
        """pop_back(ComplexFloatVector self)"""
        return _amg_core.ComplexFloatVector_pop_back(self)

    def erase(self, *args):
        """
        erase(ComplexFloatVector self, std::vector< std::complex< float > >::iterator pos) -> std::vector< std::complex< float > >::iterator
        erase(ComplexFloatVector self, std::vector< std::complex< float > >::iterator first, std::vector< std::complex< float > >::iterator last) -> std::vector< std::complex< float > >::iterator
        """
        return _amg_core.ComplexFloatVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::complex<(float)>)> self) -> ComplexFloatVector
        __init__(std::vector<(std::complex<(float)>)> self, ComplexFloatVector arg2) -> ComplexFloatVector
        __init__(std::vector<(std::complex<(float)>)> self, std::vector< std::complex< float > >::size_type size) -> ComplexFloatVector
        __init__(std::vector<(std::complex<(float)>)> self, std::vector< std::complex< float > >::size_type size, std::vector< std::complex< float > >::value_type const & value) -> ComplexFloatVector
        """
        this = _amg_core.new_ComplexFloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(ComplexFloatVector self, std::vector< std::complex< float > >::value_type const & x)"""
        return _amg_core.ComplexFloatVector_push_back(self, *args)

    def front(self):
        """front(ComplexFloatVector self) -> std::vector< std::complex< float > >::value_type const &"""
        return _amg_core.ComplexFloatVector_front(self)

    def back(self):
        """back(ComplexFloatVector self) -> std::vector< std::complex< float > >::value_type const &"""
        return _amg_core.ComplexFloatVector_back(self)

    def assign(self, *args):
        """assign(ComplexFloatVector self, std::vector< std::complex< float > >::size_type n, std::vector< std::complex< float > >::value_type const & x)"""
        return _amg_core.ComplexFloatVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(ComplexFloatVector self, std::vector< std::complex< float > >::size_type new_size)
        resize(ComplexFloatVector self, std::vector< std::complex< float > >::size_type new_size, std::vector< std::complex< float > >::value_type const & x)
        """
        return _amg_core.ComplexFloatVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(ComplexFloatVector self, std::vector< std::complex< float > >::iterator pos, std::vector< std::complex< float > >::value_type const & x) -> std::vector< std::complex< float > >::iterator
        insert(ComplexFloatVector self, std::vector< std::complex< float > >::iterator pos, std::vector< std::complex< float > >::size_type n, 
            std::vector< std::complex< float > >::value_type const & x)
        """
        return _amg_core.ComplexFloatVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(ComplexFloatVector self, std::vector< std::complex< float > >::size_type n)"""
        return _amg_core.ComplexFloatVector_reserve(self, *args)

    def capacity(self):
        """capacity(ComplexFloatVector self) -> std::vector< std::complex< float > >::size_type"""
        return _amg_core.ComplexFloatVector_capacity(self)

    __swig_destroy__ = _amg_core.delete_ComplexFloatVector
    __del__ = lambda self : None;
ComplexFloatVector_swigregister = _amg_core.ComplexFloatVector_swigregister
ComplexFloatVector_swigregister(ComplexFloatVector)

class ComplexDoubleVector(_object):
    """Proxy of C++ std::vector<(std::complex<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexDoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(ComplexDoubleVector self) -> SwigPyIterator"""
        return _amg_core.ComplexDoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(ComplexDoubleVector self) -> bool"""
        return _amg_core.ComplexDoubleVector___nonzero__(self)

    def __bool__(self):
        """__bool__(ComplexDoubleVector self) -> bool"""
        return _amg_core.ComplexDoubleVector___bool__(self)

    def __len__(self):
        """__len__(ComplexDoubleVector self) -> std::vector< std::complex< double > >::size_type"""
        return _amg_core.ComplexDoubleVector___len__(self)

    def pop(self):
        """pop(ComplexDoubleVector self) -> std::vector< std::complex< double > >::value_type"""
        return _amg_core.ComplexDoubleVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(ComplexDoubleVector self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j) -> ComplexDoubleVector"""
        return _amg_core.ComplexDoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ComplexDoubleVector self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j, 
            ComplexDoubleVector v=std::vector< std::complex< double >,std::allocator< std::complex< double > > >())
        __setslice__(ComplexDoubleVector self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)
        """
        return _amg_core.ComplexDoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(ComplexDoubleVector self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)"""
        return _amg_core.ComplexDoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ComplexDoubleVector self, std::vector< std::complex< double > >::difference_type i)
        __delitem__(ComplexDoubleVector self, PySliceObject * slice)
        """
        return _amg_core.ComplexDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ComplexDoubleVector self, PySliceObject * slice) -> ComplexDoubleVector
        __getitem__(ComplexDoubleVector self, std::vector< std::complex< double > >::difference_type i) -> std::vector< std::complex< double > >::value_type const &
        """
        return _amg_core.ComplexDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ComplexDoubleVector self, PySliceObject * slice, ComplexDoubleVector v)
        __setitem__(ComplexDoubleVector self, PySliceObject * slice)
        __setitem__(ComplexDoubleVector self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::value_type const & x)
        """
        return _amg_core.ComplexDoubleVector___setitem__(self, *args)

    def append(self, *args):
        """append(ComplexDoubleVector self, std::vector< std::complex< double > >::value_type const & x)"""
        return _amg_core.ComplexDoubleVector_append(self, *args)

    def empty(self):
        """empty(ComplexDoubleVector self) -> bool"""
        return _amg_core.ComplexDoubleVector_empty(self)

    def size(self):
        """size(ComplexDoubleVector self) -> std::vector< std::complex< double > >::size_type"""
        return _amg_core.ComplexDoubleVector_size(self)

    def clear(self):
        """clear(ComplexDoubleVector self)"""
        return _amg_core.ComplexDoubleVector_clear(self)

    def swap(self, *args):
        """swap(ComplexDoubleVector self, ComplexDoubleVector v)"""
        return _amg_core.ComplexDoubleVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(ComplexDoubleVector self) -> std::vector< std::complex< double > >::allocator_type"""
        return _amg_core.ComplexDoubleVector_get_allocator(self)

    def begin(self):
        """begin(ComplexDoubleVector self) -> std::vector< std::complex< double > >::iterator"""
        return _amg_core.ComplexDoubleVector_begin(self)

    def end(self):
        """end(ComplexDoubleVector self) -> std::vector< std::complex< double > >::iterator"""
        return _amg_core.ComplexDoubleVector_end(self)

    def rbegin(self):
        """rbegin(ComplexDoubleVector self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _amg_core.ComplexDoubleVector_rbegin(self)

    def rend(self):
        """rend(ComplexDoubleVector self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _amg_core.ComplexDoubleVector_rend(self)

    def pop_back(self):
        """pop_back(ComplexDoubleVector self)"""
        return _amg_core.ComplexDoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(ComplexDoubleVector self, std::vector< std::complex< double > >::iterator pos) -> std::vector< std::complex< double > >::iterator
        erase(ComplexDoubleVector self, std::vector< std::complex< double > >::iterator first, std::vector< std::complex< double > >::iterator last) -> std::vector< std::complex< double > >::iterator
        """
        return _amg_core.ComplexDoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::complex<(double)>)> self) -> ComplexDoubleVector
        __init__(std::vector<(std::complex<(double)>)> self, ComplexDoubleVector arg2) -> ComplexDoubleVector
        __init__(std::vector<(std::complex<(double)>)> self, std::vector< std::complex< double > >::size_type size) -> ComplexDoubleVector
        __init__(std::vector<(std::complex<(double)>)> self, std::vector< std::complex< double > >::size_type size, std::vector< std::complex< double > >::value_type const & value) -> ComplexDoubleVector
        """
        this = _amg_core.new_ComplexDoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(ComplexDoubleVector self, std::vector< std::complex< double > >::value_type const & x)"""
        return _amg_core.ComplexDoubleVector_push_back(self, *args)

    def front(self):
        """front(ComplexDoubleVector self) -> std::vector< std::complex< double > >::value_type const &"""
        return _amg_core.ComplexDoubleVector_front(self)

    def back(self):
        """back(ComplexDoubleVector self) -> std::vector< std::complex< double > >::value_type const &"""
        return _amg_core.ComplexDoubleVector_back(self)

    def assign(self, *args):
        """assign(ComplexDoubleVector self, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)"""
        return _amg_core.ComplexDoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(ComplexDoubleVector self, std::vector< std::complex< double > >::size_type new_size)
        resize(ComplexDoubleVector self, std::vector< std::complex< double > >::size_type new_size, std::vector< std::complex< double > >::value_type const & x)
        """
        return _amg_core.ComplexDoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(ComplexDoubleVector self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::value_type const & x) -> std::vector< std::complex< double > >::iterator
        insert(ComplexDoubleVector self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::size_type n, 
            std::vector< std::complex< double > >::value_type const & x)
        """
        return _amg_core.ComplexDoubleVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(ComplexDoubleVector self, std::vector< std::complex< double > >::size_type n)"""
        return _amg_core.ComplexDoubleVector_reserve(self, *args)

    def capacity(self):
        """capacity(ComplexDoubleVector self) -> std::vector< std::complex< double > >::size_type"""
        return _amg_core.ComplexDoubleVector_capacity(self)

    __swig_destroy__ = _amg_core.delete_ComplexDoubleVector
    __del__ = lambda self : None;
ComplexDoubleVector_swigregister = _amg_core.ComplexDoubleVector_swigregister
ComplexDoubleVector_swigregister(ComplexDoubleVector)

class PairVectorDouble(_object):
    """Proxy of C++ std::pair<(std::vector<(int)>,std::vector<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairVectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(std::pair<(std::vector<(int)>,std::vector<(double)>)> self) -> PairVectorDouble
        __init__(std::pair<(std::vector<(int)>,std::vector<(double)>)> self, IntVector first, DoubleVector second) -> PairVectorDouble
        __init__(std::pair<(std::vector<(int)>,std::vector<(double)>)> self, PairVectorDouble p) -> PairVectorDouble
        """
        this = _amg_core.new_PairVectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _amg_core.PairVectorDouble_first_set
    __swig_getmethods__["first"] = _amg_core.PairVectorDouble_first_get
    if _newclass:first = _swig_property(_amg_core.PairVectorDouble_first_get, _amg_core.PairVectorDouble_first_set)
    __swig_setmethods__["second"] = _amg_core.PairVectorDouble_second_set
    __swig_getmethods__["second"] = _amg_core.PairVectorDouble_second_get
    if _newclass:second = _swig_property(_amg_core.PairVectorDouble_second_get, _amg_core.PairVectorDouble_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _amg_core.delete_PairVectorDouble
    __del__ = lambda self : None;
PairVectorDouble_swigregister = _amg_core.PairVectorDouble_swigregister
PairVectorDouble_swigregister(PairVectorDouble)

class PairVectorFloat(_object):
    """Proxy of C++ std::pair<(std::vector<(int)>,std::vector<(float)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairVectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairVectorFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(std::pair<(std::vector<(int)>,std::vector<(float)>)> self) -> PairVectorFloat
        __init__(std::pair<(std::vector<(int)>,std::vector<(float)>)> self, IntVector first, FloatVector second) -> PairVectorFloat
        __init__(std::pair<(std::vector<(int)>,std::vector<(float)>)> self, PairVectorFloat p) -> PairVectorFloat
        """
        this = _amg_core.new_PairVectorFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _amg_core.PairVectorFloat_first_set
    __swig_getmethods__["first"] = _amg_core.PairVectorFloat_first_get
    if _newclass:first = _swig_property(_amg_core.PairVectorFloat_first_get, _amg_core.PairVectorFloat_first_set)
    __swig_setmethods__["second"] = _amg_core.PairVectorFloat_second_set
    __swig_getmethods__["second"] = _amg_core.PairVectorFloat_second_get
    if _newclass:second = _swig_property(_amg_core.PairVectorFloat_second_get, _amg_core.PairVectorFloat_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _amg_core.delete_PairVectorFloat
    __del__ = lambda self : None;
PairVectorFloat_swigregister = _amg_core.PairVectorFloat_swigregister
PairVectorFloat_swigregister(PairVectorFloat)


def signof(*args):
  """
    signof(int a) -> int
    signof(float a) -> float
    signof(double a) -> double
    """
  return _amg_core.signof(*args)

def conjugate(*args):
  """
    conjugate(float const & x) -> float
    conjugate(double const & x) -> double
    conjugate(std::complex< float > const & x) -> std::complex< float >
    conjugate(std::complex< double > const & x) -> std::complex< double >
    """
  return _amg_core.conjugate(*args)

def real(*args):
  """
    real(float const & x) -> float
    real(double const & x) -> double
    real(std::complex< float > const & x) -> float
    real(std::complex< double > const & x) -> double
    """
  return _amg_core.real(*args)

def imag(*args):
  """
    imag(float const & x) -> float
    imag(double const & x) -> double
    imag(std::complex< float > const & x) -> float
    imag(std::complex< double > const & x) -> double
    """
  return _amg_core.imag(*args)

def mynorm(*args):
  """
    mynorm(float const & x) -> float
    mynorm(double const & x) -> double
    mynorm(std::complex< float > const & x) -> float
    mynorm(std::complex< double > const & x) -> double
    """
  return _amg_core.mynorm(*args)

def mynormsq(*args):
  """
    mynormsq(float const & x) -> float
    mynormsq(double const & x) -> double
    mynormsq(std::complex< float > const & x) -> float
    mynormsq(std::complex< double > const & x) -> double
    """
  return _amg_core.mynormsq(*args)

def zero_real(*args):
  """
    zero_real(float & x) -> float
    zero_real(double & x) -> double
    zero_real(std::complex< float > & x) -> std::complex< float >
    zero_real(std::complex< double > & x) -> std::complex< double >
    """
  return _amg_core.zero_real(*args)

def zero_imag(*args):
  """
    zero_imag(float & x) -> float
    zero_imag(double & x) -> double
    zero_imag(std::complex< float > & x) -> std::complex< float >
    zero_imag(std::complex< double > & x) -> std::complex< double >
    """
  return _amg_core.zero_imag(*args)

def pinv_array(*args):
  """
    pinv_array(float [] AA, int const m, int const n, char const TransA)
    pinv_array(double [] AA, int const m, int const n, char const TransA)
    pinv_array(std::complex< float > [] AA, int const m, int const n, char const TransA)
    pinv_array(std::complex< double > [] AA, int const m, int const n, char const TransA)
    """
  return _amg_core.pinv_array(*args)

def maximal_independent_set_serial(*args):
  """
    maximal_independent_set_serial(int const num_rows, int const [] Ap, int const [] Aj, int const active, int const C, 
        int const F, int [] x) -> int
    """
  return _amg_core.maximal_independent_set_serial(*args)

def maximal_independent_set_parallel(*args):
  """
    maximal_independent_set_parallel(int const num_rows, int const [] Ap, int const [] Aj, int const active, int const C, 
        int const F, int [] x, double const [] y, int const max_iters) -> int
    """
  return _amg_core.maximal_independent_set_parallel(*args)

def maximal_independent_set_k_parallel(*args):
  """
    maximal_independent_set_k_parallel(int const num_rows, int const [] Ap, int const [] Aj, int const k, int [] x, double const [] y, 
        int const max_iters)
    """
  return _amg_core.maximal_independent_set_k_parallel(*args)

def vertex_coloring_mis(*args):
  """vertex_coloring_mis(int const num_rows, int const [] Ap, int const [] Aj, int [] x) -> int"""
  return _amg_core.vertex_coloring_mis(*args)

def vertex_coloring_jones_plassmann(*args):
  """vertex_coloring_jones_plassmann(int const num_rows, int const [] Ap, int const [] Aj, int [] x, double [] z) -> int"""
  return _amg_core.vertex_coloring_jones_plassmann(*args)

def vertex_coloring_LDF(*args):
  """vertex_coloring_LDF(int const num_rows, int const [] Ap, int const [] Aj, int [] x, double const [] y) -> int"""
  return _amg_core.vertex_coloring_LDF(*args)

def bellman_ford(*args):
  """
    bellman_ford(int const num_rows, int const [] Ap, int const [] Aj, int const [] Ax, int [] x, 
        int [] z)
    bellman_ford(int const num_rows, int const [] Ap, int const [] Aj, float const [] Ax, float [] x, 
        int [] z)
    bellman_ford(int const num_rows, int const [] Ap, int const [] Aj, double const [] Ax, double [] x, 
        int [] z)
    """
  return _amg_core.bellman_ford(*args)

def lloyd_cluster(*args):
  """
    lloyd_cluster(int const num_rows, int const [] Ap, int const [] Aj, int const [] Ax, int const num_seeds, 
        int [] x, int [] w, int [] z)
    lloyd_cluster(int const num_rows, int const [] Ap, int const [] Aj, float const [] Ax, int const num_seeds, 
        float [] x, int [] w, int [] z)
    lloyd_cluster(int const num_rows, int const [] Ap, int const [] Aj, double const [] Ax, int const num_seeds, 
        double [] x, int [] w, int [] z)
    """
  return _amg_core.lloyd_cluster(*args)

def breadth_first_search(*args):
  """breadth_first_search(int const [] Ap, int const [] Aj, int const seed, int [] order, int [] level)"""
  return _amg_core.breadth_first_search(*args)

def connected_components(*args):
  """connected_components(int const num_nodes, int const [] Ap, int const [] Aj, int [] components) -> int"""
  return _amg_core.connected_components(*args)

def apply_householders(*args):
  """
    apply_householders(float [] z, float const [] B, int const n, int const start, int const stop, int const step)
    apply_householders(double [] z, double const [] B, int const n, int const start, int const stop, int const step)
    apply_householders(std::complex< float > [] z, std::complex< float > const [] B, int const n, int const start, 
        int const stop, int const step)
    apply_householders(std::complex< double > [] z, std::complex< double > const [] B, int const n, int const start, 
        int const stop, int const step)
    """
  return _amg_core.apply_householders(*args)

def householder_hornerscheme(*args):
  """
    householder_hornerscheme(float [] z, float const [] B, float const [] y, int const n, int const start, int const stop, 
        int const step)
    householder_hornerscheme(double [] z, double const [] B, double const [] y, int const n, int const start, 
        int const stop, int const step)
    householder_hornerscheme(std::complex< float > [] z, std::complex< float > const [] B, std::complex< float > const [] y, 
        int const n, int const start, int const stop, int const step)
    householder_hornerscheme(std::complex< double > [] z, std::complex< double > const [] B, std::complex< double > const [] y, 
        int const n, int const start, int const stop, int const step)
    """
  return _amg_core.householder_hornerscheme(*args)

def apply_givens(*args):
  """
    apply_givens(float const [] B, float [] x, int const n, int const nrot)
    apply_givens(double const [] B, double [] x, int const n, int const nrot)
    apply_givens(std::complex< float > const [] B, std::complex< float > [] x, int const n, int const nrot)
    apply_givens(std::complex< double > const [] B, std::complex< double > [] x, int const n, int const nrot)
    """
  return _amg_core.apply_givens(*args)

def gauss_seidel(*args):
  """
    gauss_seidel(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        int const row_start, int const row_stop, int const row_step)
    gauss_seidel(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        int const row_start, int const row_stop, int const row_step)
    gauss_seidel(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, int const row_start, int const row_stop, 
        int const row_step)
    gauss_seidel(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, int const row_start, int const row_stop, 
        int const row_step)
    """
  return _amg_core.gauss_seidel(*args)

def bsr_gauss_seidel(*args):
  """
    bsr_gauss_seidel(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        int const row_start, int const row_stop, int const row_step, int const blocksize)
    bsr_gauss_seidel(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        int const row_start, int const row_stop, int const row_step, int const blocksize)
    bsr_gauss_seidel(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, int const row_start, int const row_stop, 
        int const row_step, int const blocksize)
    bsr_gauss_seidel(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, int const row_start, int const row_stop, 
        int const row_step, int const blocksize)
    """
  return _amg_core.bsr_gauss_seidel(*args)

def jacobi(*args):
  """
    jacobi(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        float [] temp, int const row_start, int const row_stop, int const row_step, 
        float const [] omega)
    jacobi(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        double [] temp, int const row_start, int const row_stop, int const row_step, 
        double const [] omega)
    jacobi(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, std::complex< float > [] temp, 
        int const row_start, int const row_stop, int const row_step, std::complex< float > const [] omega)
    jacobi(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, std::complex< double > [] temp, 
        int const row_start, int const row_stop, int const row_step, std::complex< double > const [] omega)
    """
  return _amg_core.jacobi(*args)

def bsr_jacobi(*args):
  """
    bsr_jacobi(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        float [] temp, int const row_start, int const row_stop, int const row_step, 
        int const blocksize, float const [] omega)
    bsr_jacobi(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        double [] temp, int const row_start, int const row_stop, int const row_step, 
        int const blocksize, double const [] omega)
    bsr_jacobi(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, std::complex< float > [] temp, 
        int const row_start, int const row_stop, int const row_step, int const blocksize, 
        std::complex< float > const [] omega)
    bsr_jacobi(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, std::complex< double > [] temp, 
        int const row_start, int const row_stop, int const row_step, int const blocksize, 
        std::complex< double > const [] omega)
    """
  return _amg_core.bsr_jacobi(*args)

def gauss_seidel_indexed(*args):
  """
    gauss_seidel_indexed(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        int const [] Id, int const row_start, int const row_stop, int const row_step)
    gauss_seidel_indexed(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        int const [] Id, int const row_start, int const row_stop, int const row_step)
    gauss_seidel_indexed(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, int const [] Id, int const row_start, 
        int const row_stop, int const row_step)
    gauss_seidel_indexed(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, int const [] Id, int const row_start, 
        int const row_stop, int const row_step)
    """
  return _amg_core.gauss_seidel_indexed(*args)

def jacobi_ne(*args):
  """
    jacobi_ne(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        float const [] Tx, float [] temp, int const row_start, int const row_stop, 
        int const row_step, float const [] omega)
    jacobi_ne(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        double const [] Tx, double [] temp, int const row_start, int const row_stop, 
        int const row_step, double const [] omega)
    jacobi_ne(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, std::complex< float > const [] Tx, 
        std::complex< float > [] temp, int const row_start, int const row_stop, 
        int const row_step, std::complex< float > const [] omega)
    jacobi_ne(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, std::complex< double > const [] Tx, 
        std::complex< double > [] temp, int const row_start, int const row_stop, 
        int const row_step, std::complex< double > const [] omega)
    """
  return _amg_core.jacobi_ne(*args)

def gauss_seidel_nr(*args):
  """
    gauss_seidel_nr(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float [] z, int const col_start, 
        int const col_stop, int const col_step, float const [] Tx, 
        float const omega)
    gauss_seidel_nr(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double [] z, int const col_start, 
        int const col_stop, int const col_step, double const [] Tx, 
        double const omega)
    gauss_seidel_nr(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > [] z, int const col_start, int const col_stop, 
        int const col_step, std::complex< float > const [] Tx, float const omega)
    gauss_seidel_nr(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > [] z, int const col_start, int const col_stop, 
        int const col_step, std::complex< double > const [] Tx, double const omega)
    """
  return _amg_core.gauss_seidel_nr(*args)

def gauss_seidel_ne(*args):
  """
    gauss_seidel_ne(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        int const row_start, int const row_stop, int const row_step, float const [] Tx, 
        float const omega)
    gauss_seidel_ne(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        int const row_start, int const row_stop, int const row_step, double const [] Tx, 
        double const omega)
    gauss_seidel_ne(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, int const row_start, int const row_stop, 
        int const row_step, std::complex< float > const [] Tx, float const omega)
    gauss_seidel_ne(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, int const row_start, int const row_stop, 
        int const row_step, std::complex< double > const [] Tx, 
        double const omega)
    """
  return _amg_core.gauss_seidel_ne(*args)

def block_jacobi(*args):
  """
    block_jacobi(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        float const [] Tx, float [] temp, int const row_start, int const row_stop, 
        int const row_step, float const [] omega, int const blocksize)
    block_jacobi(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        double const [] Tx, double [] temp, int const row_start, int const row_stop, 
        int const row_step, double const [] omega, int const blocksize)
    block_jacobi(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, std::complex< float > const [] Tx, 
        std::complex< float > [] temp, int const row_start, int const row_stop, 
        int const row_step, std::complex< float > const [] omega, int const blocksize)
    block_jacobi(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, std::complex< double > const [] Tx, 
        std::complex< double > [] temp, int const row_start, int const row_stop, 
        int const row_step, std::complex< double > const [] omega, int const blocksize)
    """
  return _amg_core.block_jacobi(*args)

def block_gauss_seidel(*args):
  """
    block_gauss_seidel(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        float const [] Tx, int const row_start, int const row_stop, int const row_step, 
        int const blocksize)
    block_gauss_seidel(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        double const [] Tx, int const row_start, int const row_stop, int const row_step, 
        int const blocksize)
    block_gauss_seidel(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, std::complex< float > const [] Tx, 
        int const row_start, int const row_stop, int const row_step, int const blocksize)
    block_gauss_seidel(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, std::complex< double > const [] Tx, 
        int const row_start, int const row_stop, int const row_step, 
        int const blocksize)
    """
  return _amg_core.block_gauss_seidel(*args)

def extract_subblocks(*args):
  """
    extract_subblocks(int const [] Ap, int const [] Aj, float const [] Ax, float [] Tx, int const [] Tp, 
        int const [] Sj, int const [] Sp, int const nsdomains, int const nrows)
    extract_subblocks(int const [] Ap, int const [] Aj, double const [] Ax, double [] Tx, int const [] Tp, 
        int const [] Sj, int const [] Sp, int const nsdomains, int const nrows)
    extract_subblocks(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] Tx, 
        int const [] Tp, int const [] Sj, int const [] Sp, int const nsdomains, 
        int const nrows)
    extract_subblocks(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] Tx, 
        int const [] Tp, int const [] Sj, int const [] Sp, int const nsdomains, 
        int const nrows)
    """
  return _amg_core.extract_subblocks(*args)

def overlapping_schwarz_csr(*args):
  """
    overlapping_schwarz_csr(int const [] Ap, int const [] Aj, float const [] Ax, float [] x, float const [] b, 
        float const [] Tx, int const [] Tp, int const [] Sj, int const [] Sp, int nsdomains, 
        int nrows, int row_start, int row_stop, int row_step)
    overlapping_schwarz_csr(int const [] Ap, int const [] Aj, double const [] Ax, double [] x, double const [] b, 
        double const [] Tx, int const [] Tp, int const [] Sj, int const [] Sp, 
        int nsdomains, int nrows, int row_start, int row_stop, int row_step)
    overlapping_schwarz_csr(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, std::complex< float > [] x, 
        std::complex< float > const [] b, std::complex< float > const [] Tx, 
        int const [] Tp, int const [] Sj, int const [] Sp, int nsdomains, 
        int nrows, int row_start, int row_stop, int row_step)
    overlapping_schwarz_csr(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, std::complex< double > [] x, 
        std::complex< double > const [] b, std::complex< double > const [] Tx, 
        int const [] Tp, int const [] Sj, int const [] Sp, int nsdomains, 
        int nrows, int row_start, int row_stop, int row_step)
    """
  return _amg_core.overlapping_schwarz_csr(*args)

def symmetric_strength_of_connection(*args):
  """
    symmetric_strength_of_connection(int const n_row, float const theta, int const [] Ap, int const [] Aj, float const [] Ax, 
        int [] Sp, int [] Sj, float [] Sx)
    symmetric_strength_of_connection(int const n_row, double const theta, int const [] Ap, int const [] Aj, double const [] Ax, 
        int [] Sp, int [] Sj, double [] Sx)
    symmetric_strength_of_connection(int const n_row, float const theta, int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, 
        int [] Sp, int [] Sj, std::complex< float > [] Sx)
    symmetric_strength_of_connection(int const n_row, double const theta, int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, 
        int [] Sp, int [] Sj, std::complex< double > [] Sx)
    """
  return _amg_core.symmetric_strength_of_connection(*args)

def naive_aggregation(*args):
  """naive_aggregation(int const n_row, int const [] Ap, int const [] Aj, int [] x, int [] y) -> int"""
  return _amg_core.naive_aggregation(*args)

def standard_aggregation(*args):
  """standard_aggregation(int const n_row, int const [] Ap, int const [] Aj, int [] x, int [] y) -> int"""
  return _amg_core.standard_aggregation(*args)

def fit_candidates(*args):
  """
    fit_candidates(int const n_row, int const n_col, int const K1, int const K2, int const [] Ap, int const [] Ai, 
        float [] Ax, float const [] B, float [] R, float const tol)
    fit_candidates(int const n_row, int const n_col, int const K1, int const K2, int const [] Ap, int const [] Ai, 
        double [] Ax, double const [] B, double [] R, double const tol)
    fit_candidates(int const n_row, int const n_col, int const K1, int const K2, int const [] Ap, int const [] Ai, 
        std::complex< float > [] Ax, std::complex< float > const [] B, 
        std::complex< float > [] R, float const tol)
    fit_candidates(int const n_row, int const n_col, int const K1, int const K2, int const [] Ap, int const [] Ai, 
        std::complex< double > [] Ax, std::complex< double > const [] B, 
        std::complex< double > [] R, double const tol)
    """
  return _amg_core.fit_candidates(*args)

def satisfy_constraints_helper(*args):
  """
    satisfy_constraints_helper(int const RowsPerBlock, int const ColsPerBlock, int const num_block_rows, int const NullDim, 
        float const [] x, float const [] y, float const [] z, int const [] Sp, 
        int const [] Sj, float [] Sx)
    satisfy_constraints_helper(int const RowsPerBlock, int const ColsPerBlock, int const num_block_rows, int const NullDim, 
        double const [] x, double const [] y, double const [] z, int const [] Sp, 
        int const [] Sj, double [] Sx)
    satisfy_constraints_helper(int const RowsPerBlock, int const ColsPerBlock, int const num_block_rows, int const NullDim, 
        std::complex< float > const [] x, std::complex< float > const [] y, 
        std::complex< float > const [] z, int const [] Sp, int const [] Sj, std::complex< float > [] Sx)
    satisfy_constraints_helper(int const RowsPerBlock, int const ColsPerBlock, int const num_block_rows, int const NullDim, 
        std::complex< double > const [] x, std::complex< double > const [] y, 
        std::complex< double > const [] z, int const [] Sp, int const [] Sj, 
        std::complex< double > [] Sx)
    """
  return _amg_core.satisfy_constraints_helper(*args)

def calc_BtB(*args):
  """
    calc_BtB(int const NullDim, int const Nnodes, int const ColsPerBlock, float const [] b, int const BsqCols, 
        float [] x, int const [] Sp, int const [] Sj)
    calc_BtB(int const NullDim, int const Nnodes, int const ColsPerBlock, double const [] b, int const BsqCols, 
        double [] x, int const [] Sp, int const [] Sj)
    calc_BtB(int const NullDim, int const Nnodes, int const ColsPerBlock, std::complex< float > const [] b, 
        int const BsqCols, std::complex< float > [] x, int const [] Sp, 
        int const [] Sj)
    calc_BtB(int const NullDim, int const Nnodes, int const ColsPerBlock, std::complex< double > const [] b, 
        int const BsqCols, std::complex< double > [] x, int const [] Sp, 
        int const [] Sj)
    """
  return _amg_core.calc_BtB(*args)

def incomplete_mat_mult_bsr(*args):
  """
    incomplete_mat_mult_bsr(int const [] Ap, int const [] Aj, float const [] Ax, int const [] Bp, int const [] Bj, 
        float const [] Bx, int const [] Sp, int const [] Sj, float [] Sx, int const n_brow, 
        int const n_bcol, int const brow_A, int const bcol_A, int const bcol_B)
    incomplete_mat_mult_bsr(int const [] Ap, int const [] Aj, double const [] Ax, int const [] Bp, int const [] Bj, 
        double const [] Bx, int const [] Sp, int const [] Sj, double [] Sx, 
        int const n_brow, int const n_bcol, int const brow_A, int const bcol_A, int const bcol_B)
    incomplete_mat_mult_bsr(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, int const [] Bp, 
        int const [] Bj, std::complex< float > const [] Bx, int const [] Sp, int const [] Sj, 
        std::complex< float > [] Sx, int const n_brow, int const n_bcol, 
        int const brow_A, int const bcol_A, int const bcol_B)
    incomplete_mat_mult_bsr(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, int const [] Bp, 
        int const [] Bj, std::complex< double > const [] Bx, int const [] Sp, 
        int const [] Sj, std::complex< double > [] Sx, int const n_brow, int const n_bcol, 
        int const brow_A, int const bcol_A, int const bcol_B)
    """
  return _amg_core.incomplete_mat_mult_bsr(*args)

def truncate_rows_csr(*args):
  """
    truncate_rows_csr(int const n_row, int const k, int const [] Sp, int [] Sj, float [] Sx)
    truncate_rows_csr(int const n_row, int const k, int const [] Sp, int [] Sj, double [] Sx)
    truncate_rows_csr(int const n_row, int const k, int const [] Sp, int [] Sj, std::complex< float > [] Sx)
    truncate_rows_csr(int const n_row, int const k, int const [] Sp, int [] Sj, std::complex< double > [] Sx)
    """
  return _amg_core.truncate_rows_csr(*args)
F_NODE = _amg_core.F_NODE
C_NODE = _amg_core.C_NODE
U_NODE = _amg_core.U_NODE

def classical_strength_of_connection(*args):
  """
    classical_strength_of_connection(int const n_row, float const theta, int const [] Ap, int const [] Aj, float const [] Ax, 
        int [] Sp, int [] Sj, float [] Sx)
    classical_strength_of_connection(int const n_row, double const theta, int const [] Ap, int const [] Aj, double const [] Ax, 
        int [] Sp, int [] Sj, double [] Sx)
    classical_strength_of_connection(int const n_row, float const theta, int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, 
        int [] Sp, int [] Sj, std::complex< float > [] Sx)
    classical_strength_of_connection(int const n_row, double const theta, int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, 
        int [] Sp, int [] Sj, std::complex< double > [] Sx)
    """
  return _amg_core.classical_strength_of_connection(*args)

def maximum_row_value(*args):
  """
    maximum_row_value(int const n_row, float [] x, int const [] Ap, int const [] Aj, float const [] Ax)
    maximum_row_value(int const n_row, double [] x, int const [] Ap, int const [] Aj, double const [] Ax)
    maximum_row_value(int const n_row, std::complex< float > [] x, int const [] Ap, int const [] Aj, std::complex< float > const [] Ax)
    maximum_row_value(int const n_row, std::complex< double > [] x, int const [] Ap, int const [] Aj, std::complex< double > const [] Ax)
    """
  return _amg_core.maximum_row_value(*args)

def rs_cf_splitting(*args):
  """
    rs_cf_splitting(int const n_nodes, int const [] Sp, int const [] Sj, int const [] Tp, int const [] Tj, 
        int [] splitting)
    """
  return _amg_core.rs_cf_splitting(*args)

def cljp_naive_splitting(*args):
  """
    cljp_naive_splitting(int const n, int const [] Sp, int const [] Sj, int const [] Tp, int const [] Tj, 
        int [] splitting, int const colorflag)
    """
  return _amg_core.cljp_naive_splitting(*args)

def rs_direct_interpolation_pass1(*args):
  """rs_direct_interpolation_pass1(int const n_nodes, int const [] Sp, int const [] Sj, int const [] splitting, int [] Bp)"""
  return _amg_core.rs_direct_interpolation_pass1(*args)

def rs_direct_interpolation_pass2(*args):
  """
    rs_direct_interpolation_pass2(int const n_nodes, int const [] Ap, int const [] Aj, float const [] Ax, int const [] Sp, 
        int const [] Sj, float const [] Sx, int const [] splitting, int const [] Bp, 
        int [] Bj, float [] Bx)
    rs_direct_interpolation_pass2(int const n_nodes, int const [] Ap, int const [] Aj, double const [] Ax, int const [] Sp, 
        int const [] Sj, double const [] Sx, int const [] splitting, int const [] Bp, 
        int [] Bj, double [] Bx)
    """
  return _amg_core.rs_direct_interpolation_pass2(*args)

def cr_helper(*args):
  """
    cr_helper(int const [] A_rowptr, int const [] A_colinds, float const [] B, float [] e, int [] indices, 
        int [] splitting, float [] gamma, float const thetacs, float [] cost)
    cr_helper(int const [] A_rowptr, int const [] A_colinds, double const [] B, double [] e, int [] indices, 
        int [] splitting, double [] gamma, double const thetacs, double [] cost)
    """
  return _amg_core.cr_helper(*args)

def apply_distance_filter(*args):
  """
    apply_distance_filter(int const n_row, float const epsilon, int const [] Sp, int const [] Sj, float [] Sx)
    apply_distance_filter(int const n_row, double const epsilon, int const [] Sp, int const [] Sj, double [] Sx)
    """
  return _amg_core.apply_distance_filter(*args)

def apply_absolute_distance_filter(*args):
  """
    apply_absolute_distance_filter(int const n_row, float const epsilon, int const [] Sp, int const [] Sj, float [] Sx)
    apply_absolute_distance_filter(int const n_row, double const epsilon, int const [] Sp, int const [] Sj, double [] Sx)
    """
  return _amg_core.apply_absolute_distance_filter(*args)

def min_blocks(*args):
  """
    min_blocks(int const n_blocks, int const blocksize, float const [] Sx, float [] Tx)
    min_blocks(int const n_blocks, int const blocksize, double const [] Sx, double [] Tx)
    """
  return _amg_core.min_blocks(*args)

def evolution_strength_helper(*args):
  """
    evolution_strength_helper(float [] Sx, int const [] Sp, int const [] Sj, int const nrows, float const [] x, 
        float const [] y, float const [] b, int const BDBCols, int const NullDim, 
        float const tol)
    evolution_strength_helper(double [] Sx, int const [] Sp, int const [] Sj, int const nrows, double const [] x, 
        double const [] y, double const [] b, int const BDBCols, int const NullDim, 
        double const tol)
    evolution_strength_helper(std::complex< float > [] Sx, int const [] Sp, int const [] Sj, int const nrows, std::complex< float > const [] x, 
        std::complex< float > const [] y, std::complex< float > const [] b, 
        int const BDBCols, int const NullDim, float const tol)
    evolution_strength_helper(std::complex< double > [] Sx, int const [] Sp, int const [] Sj, int const nrows, 
        std::complex< double > const [] x, std::complex< double > const [] y, std::complex< double > const [] b, 
        int const BDBCols, int const NullDim, double const tol)
    """
  return _amg_core.evolution_strength_helper(*args)

def incomplete_mat_mult_csr(*args):
  """
    incomplete_mat_mult_csr(int const [] Ap, int const [] Aj, float const [] Ax, int const [] Bp, int const [] Bj, 
        float const [] Bx, int const [] Sp, int const [] Sj, float [] Sx, int const num_rows)
    incomplete_mat_mult_csr(int const [] Ap, int const [] Aj, double const [] Ax, int const [] Bp, int const [] Bj, 
        double const [] Bx, int const [] Sp, int const [] Sj, double [] Sx, 
        int const num_rows)
    incomplete_mat_mult_csr(int const [] Ap, int const [] Aj, std::complex< float > const [] Ax, int const [] Bp, 
        int const [] Bj, std::complex< float > const [] Bx, int const [] Sp, int const [] Sj, 
        std::complex< float > [] Sx, int const num_rows)
    incomplete_mat_mult_csr(int const [] Ap, int const [] Aj, std::complex< double > const [] Ax, int const [] Bp, 
        int const [] Bj, std::complex< double > const [] Bx, int const [] Sp, 
        int const [] Sj, std::complex< double > [] Sx, int const num_rows)
    """
  return _amg_core.incomplete_mat_mult_csr(*args)

def row_major(*args):
  """row_major(int const & row, int const & col, int const & num_cols) -> int"""
  return _amg_core.row_major(*args)

def col_major(*args):
  """col_major(int const & row, int const & col, int const & num_rows) -> int"""
  return _amg_core.col_major(*args)

def get_ind_split(*args):
  """get_ind_split(int const [] Cpts, int const & numCpts, int const & n) -> IntVector"""
  return _amg_core.get_ind_split(*args)

def get_col_ptr(*args):
  """
    get_col_ptr(int const [] A_rowptr, int const [] A_colinds, int const & n, int const [] is_col_ind, 
        int const [] is_row_ind, int [] colptr, int const & num_cols, int const & row_scale=1, 
        int const & col_scale=1) -> int
    get_col_ptr(int const [] A_rowptr, int const [] A_colinds, int const & n, int const [] is_col_ind, 
        int const [] is_row_ind, int [] colptr, int const & num_cols, int const & row_scale=1) -> int
    get_col_ptr(int const [] A_rowptr, int const [] A_colinds, int const & n, int const [] is_col_ind, 
        int const [] is_row_ind, int [] colptr, int const & num_cols) -> int
    """
  return _amg_core.get_col_ptr(*args)

def constrained_least_squares(*args):
  """
    constrained_least_squares(FloatVector A, FloatVector b, FloatVector C, FloatVector d, int const & m, int const & n, 
        int const & s) -> FloatVector
    constrained_least_squares(DoubleVector A, DoubleVector b, DoubleVector C, DoubleVector d, int const & m, int const & n, 
        int const & s) -> DoubleVector
    """
  return _amg_core.constrained_least_squares(*args)

def least_squares(*args):
  """
    least_squares(float [] A, float [] b, float [] x, int const & m, int const & n, int const is_col_major=0)
    least_squares(float [] A, float [] b, float [] x, int const & m, int const & n)
    least_squares(double [] A, double [] b, double [] x, int const & m, int const & n, int const is_col_major=0)
    least_squares(double [] A, double [] b, double [] x, int const & m, int const & n)
    """
  return _amg_core.least_squares(*args)

def lower_tri_solve(*args):
  """
    lower_tri_solve(float const [] L, float const [] rhs, float [] x, int const & m, int const & n, int const is_col_major)
    lower_tri_solve(double const [] L, double const [] rhs, double [] x, int const & m, int const & n, 
        int const is_col_major)
    """
  return _amg_core.lower_tri_solve(*args)

def upper_tri_solve(*args):
  """
    upper_tri_solve(float const [] R, float const [] rhs, float [] x, int const & m, int const & n, int const is_col_major)
    upper_tri_solve(double const [] R, double const [] rhs, double [] x, int const & m, int const & n, 
        int const is_col_major)
    """
  return _amg_core.upper_tri_solve(*args)

def get_csc_submatrix(*args):
  """
    get_csc_submatrix(int const [] A_rowptr, int const [] A_colinds, float const [] A_data, int const & n, 
        int const [] is_col_ind, int const [] is_row_ind, int [] colptr, int [] rowinds, 
        float [] data, int const & num_cols, int const & row_scale=1, int const & col_scale=1)
    get_csc_submatrix(int const [] A_rowptr, int const [] A_colinds, float const [] A_data, int const & n, 
        int const [] is_col_ind, int const [] is_row_ind, int [] colptr, int [] rowinds, 
        float [] data, int const & num_cols, int const & row_scale=1)
    get_csc_submatrix(int const [] A_rowptr, int const [] A_colinds, float const [] A_data, int const & n, 
        int const [] is_col_ind, int const [] is_row_ind, int [] colptr, int [] rowinds, 
        float [] data, int const & num_cols)
    get_csc_submatrix(int const [] A_rowptr, int const [] A_colinds, double const [] A_data, int const & n, 
        int const [] is_col_ind, int const [] is_row_ind, int [] colptr, int [] rowinds, 
        double [] data, int const & num_cols, int const & row_scale=1, int const & col_scale=1)
    get_csc_submatrix(int const [] A_rowptr, int const [] A_colinds, double const [] A_data, int const & n, 
        int const [] is_col_ind, int const [] is_row_ind, int [] colptr, int [] rowinds, 
        double [] data, int const & num_cols, int const & row_scale=1)
    get_csc_submatrix(int const [] A_rowptr, int const [] A_colinds, double const [] A_data, int const & n, 
        int const [] is_col_ind, int const [] is_row_ind, int [] colptr, int [] rowinds, 
        double [] data, int const & num_cols)
    """
  return _amg_core.get_csc_submatrix(*args)

def QR(*args):
  """
    QR(float [] A, int const & m, int const & n, int const is_col_major) -> FloatVector
    QR(double [] A, int const & m, int const & n, int const is_col_major) -> DoubleVector
    """
  return _amg_core.QR(*args)

def ben_ideal_interpolation(*args):
  """
    ben_ideal_interpolation(int const [] A_rowptr, int const [] A_colinds, float const [] A_data, int const [] S_rowptr, 
        int const [] S_colinds, int [] P_rowptr, float const [] B, int const [] Cpts, 
        int const n, int const num_bad_guys) -> PairVectorFloat
    ben_ideal_interpolation(int const [] A_rowptr, int const [] A_colinds, double const [] A_data, int const [] S_rowptr, 
        int const [] S_colinds, int [] P_rowptr, double const [] B, int const [] Cpts, 
        int const n, int const num_bad_guys) -> PairVectorDouble
    """
  return _amg_core.ben_ideal_interpolation(*args)
# This file is compatible with both classic and new-style classes.


